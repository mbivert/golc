// Code generated by "stringer -type tokenKind -linecomment tokenkind.go"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tokenEOF-0]
	_ = x[tokenError-1]
	_ = x[tokenName-2]
	_ = x[tokenLambda-3]
	_ = x[tokenLParen-4]
	_ = x[tokenRParen-5]
	_ = x[tokenDot-6]
	_ = x[tokenFloat-7]
	_ = x[tokenInt-8]
	_ = x[tokenBool-9]
	_ = x[tokenTBool-10]
	_ = x[tokenTInt-11]
	_ = x[tokenTFloat-12]
	_ = x[tokenTUnit-13]
	_ = x[tokenExcl-14]
	_ = x[tokenPlus-15]
	_ = x[tokenMinus-16]
	_ = x[tokenStar-17]
	_ = x[tokenSlash-18]
	_ = x[tokenLess-19]
	_ = x[tokenMore-20]
	_ = x[tokenComa-21]
	_ = x[tokenEqual-22]
	_ = x[tokenLBracket-23]
	_ = x[tokenRBracket-24]
	_ = x[tokenOr-25]
	_ = x[tokenAnd-26]
	_ = x[tokenMoreEq-27]
	_ = x[tokenLessEq-28]
	_ = x[tokenFPlus-29]
	_ = x[tokenFMinus-30]
	_ = x[tokenFStar-31]
	_ = x[tokenFSlash-32]
	_ = x[tokenFLess-33]
	_ = x[tokenFMore-34]
	_ = x[tokenAndAnd-35]
	_ = x[tokenOrOr-36]
	_ = x[tokenFMoreEq-37]
	_ = x[tokenFLessEq-38]
	_ = x[tokenColon-39]
	_ = x[tokenPi-40]
	_ = x[tokenArrow-41]
	_ = x[tokenProduct-42]
	_ = x[tokenLet-43]
	_ = x[tokenIn-44]
	_ = x[tokenRec-45]
	_ = x[tokenMatch-46]
	_ = x[tokenWith-47]
	_ = x[tokenIf-48]
	_ = x[tokenThen-49]
	_ = x[tokenElse-50]
	_ = x[tokenNew-51]
	_ = x[tokenMeas-52]
}

const _tokenKind_name = "EOFerrornameλ().float64int64boolboolintfloatunit!+-*/<>,=〈〉|&≥≤+.-.*./.<.>.&&||≥.≤.:π→×letinrecmatchwithifthenelsenewmeas"

var _tokenKind_index = [...]uint8{0, 3, 8, 12, 14, 15, 16, 17, 24, 29, 33, 37, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 69, 72, 74, 76, 78, 80, 82, 84, 86, 88, 92, 96, 97, 99, 102, 104, 107, 109, 112, 117, 121, 123, 127, 131, 134, 138}

func (i tokenKind) String() string {
	if i >= tokenKind(len(_tokenKind_index)-1) {
		return "tokenKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _tokenKind_name[_tokenKind_index[i]:_tokenKind_index[i+1]]
}

// Code generated by "stringer -type tokenKind -linecomment tokenkind.go"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tokenEOF-0]
	_ = x[tokenError-1]
	_ = x[tokenName-2]
	_ = x[tokenLambda-3]
	_ = x[tokenLParen-4]
	_ = x[tokenRParen-5]
	_ = x[tokenDot-6]
	_ = x[tokenFloat-7]
	_ = x[tokenInt-8]
	_ = x[tokenBool-9]
	_ = x[tokenExcl-10]
	_ = x[tokenPlus-11]
	_ = x[tokenMinus-12]
	_ = x[tokenStar-13]
	_ = x[tokenSlash-14]
	_ = x[tokenMoreEq-15]
	_ = x[tokenLessEq-16]
	_ = x[tokenFPlus-17]
	_ = x[tokenFMinus-18]
	_ = x[tokenFStar-19]
	_ = x[tokenFSlash-20]
	_ = x[tokenFMoreEq-21]
	_ = x[tokenFLessEq-22]
	_ = x[tokenLess-23]
	_ = x[tokenMore-24]
	_ = x[tokenFLess-25]
	_ = x[tokenFMore-26]
	_ = x[tokenColon-27]
	_ = x[tokenPi-28]
	_ = x[tokenArrow-29]
	_ = x[tokenProduct-30]
	_ = x[tokenLet-31]
	_ = x[tokenIn-32]
	_ = x[tokenRec-33]
	_ = x[tokenMatch-34]
	_ = x[tokenWith-35]
	_ = x[tokenIf-36]
	_ = x[tokenThen-37]
	_ = x[tokenElse-38]
}

const _tokenKind_name = "EOFerrornameλ().float64int64bool!+-*/≥≤+.-.*./.≥.≤.<><.>.:π→×letinrecmatchwithifthenelse"

var _tokenKind_index = [...]uint8{0, 3, 8, 12, 14, 15, 16, 17, 24, 29, 33, 34, 35, 36, 37, 38, 41, 44, 46, 48, 50, 52, 56, 60, 61, 62, 64, 66, 67, 69, 72, 74, 77, 79, 82, 87, 91, 93, 97, 101}

func (i tokenKind) String() string {
	if i >= tokenKind(len(_tokenKind_index)-1) {
		return "tokenKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _tokenKind_name[_tokenKind_index[i]:_tokenKind_index[i+1]]
}

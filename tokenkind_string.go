// Code generated by "stringer -type tokenKind -linecomment tokenkind.go"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tokenEOF-0]
	_ = x[tokenError-1]
	_ = x[tokenName-2]
	_ = x[tokenLambda-3]
	_ = x[tokenLParen-4]
	_ = x[tokenRParen-5]
	_ = x[tokenDot-6]
	_ = x[tokenFloat-7]
	_ = x[tokenInt-8]
	_ = x[tokenBool-9]
	_ = x[tokenTBool-10]
	_ = x[tokenTInt-11]
	_ = x[tokenTFloat-12]
	_ = x[tokenTUnit-13]
	_ = x[tokenExcl-14]
	_ = x[tokenPlus-15]
	_ = x[tokenMinus-16]
	_ = x[tokenStar-17]
	_ = x[tokenSlash-18]
	_ = x[tokenLess-19]
	_ = x[tokenMore-20]
	_ = x[tokenComa-21]
	_ = x[tokenOr-22]
	_ = x[tokenAnd-23]
	_ = x[tokenMoreEq-24]
	_ = x[tokenLessEq-25]
	_ = x[tokenFPlus-26]
	_ = x[tokenFMinus-27]
	_ = x[tokenFStar-28]
	_ = x[tokenFSlash-29]
	_ = x[tokenFLess-30]
	_ = x[tokenFMore-31]
	_ = x[tokenAndAnd-32]
	_ = x[tokenOrOr-33]
	_ = x[tokenFMoreEq-34]
	_ = x[tokenFLessEq-35]
	_ = x[tokenColon-36]
	_ = x[tokenPi-37]
	_ = x[tokenArrow-38]
	_ = x[tokenProduct-39]
	_ = x[tokenLet-40]
	_ = x[tokenIn-41]
	_ = x[tokenRec-42]
	_ = x[tokenMatch-43]
	_ = x[tokenWith-44]
	_ = x[tokenIf-45]
	_ = x[tokenThen-46]
	_ = x[tokenElse-47]
	_ = x[tokenNew-48]
	_ = x[tokenMeas-49]
}

const _tokenKind_name = "EOFerrornameλ().float64int64boolboolintfloatunit!+-*/<>,|&≥≤+.-.*./.<.>.&&||≥.≤.:π→×letinrecmatchwithifthenelsenewmeas"

var _tokenKind_index = [...]uint8{0, 3, 8, 12, 14, 15, 16, 17, 24, 29, 33, 37, 40, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 67, 69, 71, 73, 75, 77, 79, 81, 85, 89, 90, 92, 95, 97, 100, 102, 105, 110, 114, 116, 120, 124, 127, 131}

func (i tokenKind) String() string {
	if i >= tokenKind(len(_tokenKind_index)-1) {
		return "tokenKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _tokenKind_name[_tokenKind_index[i]:_tokenKind_index[i+1]]
}
